/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guildwarsattendance;

import gw2import.GW2Import;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static junit.framework.Assert.assertTrue;
import org.bytedeco.javacpp.BytePointer;
import org.bytedeco.javacpp.lept.PIX;
import static org.bytedeco.javacpp.lept.pixDestroy;
import static org.bytedeco.javacpp.lept.pixRead;
import org.bytedeco.javacpp.tesseract.TessBaseAPI;


/**
 *
 * @author li_873239
 */
public class MainWindow extends javax.swing.JFrame {

    private TreeMap<String, Member> members;
    // <members> is a data structure to hold all of the member in the guild
    // The map will be populated initially from the GW2 Server with all the members
    // currently in KRTA. Then, the forum information will be imported, and any
    // forum members not in the guild, will be added to the members map as well
    // Key- Guild Wars 2 Account Name
    // Calue- Member object representing forumName, account, rank, attendance
    private TreeMap<String, String> forumMap;
    // <forumsMap> is used to track Enjin forum account names with the actual 
    // Guild Wars 2 accounts. Each Guild Wars 2 account is unique, however, there 
    // may be duplicate forum accounts.

    private HashMap<GregorianCalendar, ArrayList<String>> dailyAttendance;
    // <dailyAttendance> is a map to keep a permanent record of all data captured
    // from screenshots. This will faciliate correcting errors in attendance
    // and errors in associations.
    
    private TreeSet<RaidDate> attendanceDates;
    // Stores all of the completed attendance dates. These dates will be used
    // to update the attendance table and help with summary calculations
    
    private HashMap<String, String> associationsMap;
    // holds all of the associatios for TS Names and forum names with a 
    // GW2 Account
    
    private File currentFile;
    // Holds the save location for the current data
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        // Instantiate data structures
        forumMap = new TreeMap();
        members = new TreeMap();
        dailyAttendance = new HashMap();
        attendanceDates = new TreeSet();
        associationsMap = new HashMap();
        initComponents();

        spinner_customAttendance.setEnabled(false);
        loadData();
        //JOptionPane.showMessageDialog(this, "Error Program start", "Bad stuff", JOptionPane.ERROR_MESSAGE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_attendance = new javax.swing.ButtonGroup();
        dialog_associations = new javax.swing.JDialog();
        comboBox_dates = new javax.swing.JComboBox();
        button_finalizeAttendanceSelection = new javax.swing.JButton();
        button_associateForumNames = new javax.swing.JButton();
        scrollPane_dialogNamesAndAssociations = new javax.swing.JScrollPane();
        table_associations = new javax.swing.JTable();
        scrollPane_dialogPane = new javax.swing.JScrollPane();
        list_forumNames = new javax.swing.JList();
        tabPane_attendance = new javax.swing.JTabbedPane();
        panel_attendance = new javax.swing.JPanel();
        scrollPane_attendancePanel = new javax.swing.JScrollPane();
        table_namesAndAccountsAttendance = new javax.swing.JTable();
        radioButton_fullAttendance = new javax.swing.JRadioButton();
        radioButton_knight90DayAttendance = new javax.swing.JRadioButton();
        radioButton_devoir30DayAttendance = new javax.swing.JRadioButton();
        radioButton_currentAttendance = new javax.swing.JRadioButton();
        radioButton_customAttendance = new javax.swing.JRadioButton();
        spinner_customAttendance = new javax.swing.JSpinner();
        button_getAttendance = new javax.swing.JButton();
        panel_summary = new javax.swing.JPanel();
        scrollPane_summaryPanel = new javax.swing.JScrollPane();
        table_summaryAttendanceData = new javax.swing.JTable();
        menuBar_menu = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menuItem_open = new javax.swing.JMenuItem();
        menuItem_save = new javax.swing.JMenuItem();
        menuItem_saveAs = new javax.swing.JMenuItem();
        menu_import = new javax.swing.JMenu();
        menuItem_importGW2Info = new javax.swing.JMenuItem();
        menuItem_importForumInfo = new javax.swing.JMenuItem();
        menuItem_close = new javax.swing.JMenuItem();
        menuItem_exportAttendance = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();

        dialog_associations.setMinimumSize(new java.awt.Dimension(521, 446));

        comboBox_dates.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBox_dates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_datesActionPerformed(evt);
            }
        });

        button_finalizeAttendanceSelection.setText("Finalize Attendance Selection");
        button_finalizeAttendanceSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_finalizeAttendanceSelectionActionPerformed(evt);
            }
        });

        button_associateForumNames.setText("Associate Forum Name");
        button_associateForumNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_associateForumNamesActionPerformed(evt);
            }
        });

        table_associations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Team Speak Names", "Forum Names", "GW2 Account Name", "Association"
            }
        ));
        scrollPane_dialogNamesAndAssociations.setViewportView(table_associations);

        list_forumNames.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        scrollPane_dialogPane.setViewportView(list_forumNames);

        javax.swing.GroupLayout dialog_associationsLayout = new javax.swing.GroupLayout(dialog_associations.getContentPane());
        dialog_associations.getContentPane().setLayout(dialog_associationsLayout);
        dialog_associationsLayout.setHorizontalGroup(
            dialog_associationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_associationsLayout.createSequentialGroup()
                .addGroup(dialog_associationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(button_associateForumNames)
                    .addGroup(dialog_associationsLayout.createSequentialGroup()
                        .addGroup(dialog_associationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane_dialogNamesAndAssociations, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dialog_associationsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(comboBox_dates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(button_finalizeAttendanceSelection)))
                        .addGap(18, 18, 18)
                        .addComponent(scrollPane_dialogPane, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        dialog_associationsLayout.setVerticalGroup(
            dialog_associationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_associationsLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(dialog_associationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_finalizeAttendanceSelection, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dialog_associationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBox_dates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(dialog_associationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane_dialogNamesAndAssociations, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(dialog_associationsLayout.createSequentialGroup()
                        .addComponent(button_associateForumNames)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane_dialogPane, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_namesAndAccountsAttendance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Forum Name", "GW2 Account"
            }
        ));
        scrollPane_attendancePanel.setViewportView(table_namesAndAccountsAttendance);

        buttonGroup_attendance.add(radioButton_fullAttendance);
        radioButton_fullAttendance.setText("Full Attendance");
        radioButton_fullAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton_fullAttendanceActionPerformed(evt);
            }
        });

        buttonGroup_attendance.add(radioButton_knight90DayAttendance);
        radioButton_knight90DayAttendance.setText("90 Day \"Knight\"");
        radioButton_knight90DayAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton_knight90DayAttendanceActionPerformed(evt);
            }
        });

        buttonGroup_attendance.add(radioButton_devoir30DayAttendance);
        radioButton_devoir30DayAttendance.setText("30 Day \"Devoir\"");
        radioButton_devoir30DayAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton_devoir30DayAttendanceActionPerformed(evt);
            }
        });

        buttonGroup_attendance.add(radioButton_currentAttendance);
        radioButton_currentAttendance.setText("Current Attendance");
        radioButton_currentAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton_currentAttendanceActionPerformed(evt);
            }
        });

        buttonGroup_attendance.add(radioButton_customAttendance);
        radioButton_customAttendance.setText("Custom");
        radioButton_customAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton_customAttendanceActionPerformed(evt);
            }
        });

        button_getAttendance.setText("Get attendance");
        button_getAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_getAttendanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_attendanceLayout = new javax.swing.GroupLayout(panel_attendance);
        panel_attendance.setLayout(panel_attendanceLayout);
        panel_attendanceLayout.setHorizontalGroup(
            panel_attendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_attendanceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_attendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane_attendancePanel)
                    .addGroup(panel_attendanceLayout.createSequentialGroup()
                        .addGroup(panel_attendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioButton_knight90DayAttendance)
                            .addComponent(radioButton_currentAttendance)
                            .addGroup(panel_attendanceLayout.createSequentialGroup()
                                .addGroup(panel_attendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioButton_fullAttendance)
                                    .addGroup(panel_attendanceLayout.createSequentialGroup()
                                        .addComponent(radioButton_customAttendance)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spinner_customAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(radioButton_devoir30DayAttendance))
                                .addGap(180, 180, 180)
                                .addComponent(button_getAttendance)))
                        .addGap(0, 384, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_attendanceLayout.setVerticalGroup(
            panel_attendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_attendanceLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panel_attendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButton_fullAttendance)
                    .addComponent(button_getAttendance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioButton_devoir30DayAttendance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioButton_knight90DayAttendance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioButton_currentAttendance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_attendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButton_customAttendance)
                    .addComponent(spinner_customAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane_attendancePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPane_attendance.addTab("Attendance", panel_attendance);

        table_summaryAttendanceData.setAutoCreateRowSorter(true);
        table_summaryAttendanceData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Forum Name", "GW2 Account", "Rank", "90 Day%", "90 Day Attendance", "90 Day Available", "30 Day%", "30 Day Attendance", "30 Day Available"
            }
        ));
        scrollPane_summaryPanel.setViewportView(table_summaryAttendanceData);

        javax.swing.GroupLayout panel_summaryLayout = new javax.swing.GroupLayout(panel_summary);
        panel_summary.setLayout(panel_summaryLayout);
        panel_summaryLayout.setHorizontalGroup(
            panel_summaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane_summaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
        );
        panel_summaryLayout.setVerticalGroup(
            panel_summaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane_summaryPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );

        tabPane_attendance.addTab("Summary", panel_summary);

        menu_file.setText("File");

        menuItem_open.setText("Open");
        menuItem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_openActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_open);

        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_save);

        menuItem_saveAs.setText("Save As");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_saveAs);

        menu_import.setText("Import");

        menuItem_importGW2Info.setText("Guild Wars 2 Server Information");
        menuItem_importGW2Info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_importGW2InfoActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_importGW2Info);

        menuItem_importForumInfo.setText("Enjin Forum Information");
        menuItem_importForumInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_importForumInfoActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_importForumInfo);

        menu_file.add(menu_import);

        menuItem_close.setText("Close");
        menu_file.add(menuItem_close);

        menuItem_exportAttendance.setText("Export Attendance");
        menuItem_exportAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_exportAttendanceActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_exportAttendance);

        menuBar_menu.add(menu_file);

        menu_edit.setText("Edit");
        menuBar_menu.add(menu_edit);

        setJMenuBar(menuBar_menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabPane_attendance)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabPane_attendance)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_openActionPerformed
        // Reads the saved data (DataModel) from disk and replaces program
        // instance variables with data from dataModel
        
        JFileChooser jfc = new JFileChooser();
        {
            if (jfc.showOpenDialog(this)== JFileChooser.APPROVE_OPTION)
            {
                currentFile = jfc.getSelectedFile();
            }
            else
            {
                return;
            }
        }
        currentFile = new File("gw2Attendance_data.gwa");
        
        FileInputStream fis;
        try {
            fis = new FileInputStream(currentFile);
            ObjectInputStream ois = new ObjectInputStream(fis);
            
            DataModel dm = (DataModel) ois.readObject();
            forumMap = dm.getForumMap();
            members = dm.getMembers();
            dailyAttendance = dm.getDailyAttendance();
            attendanceDates = dm.getAttendanceDates();
            associationsMap = dm.getAssociationsMap();
            
            updateAttendanceTable();
            
            fis.close();
            ois.close();

            
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error: File Not Found", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error: Wrong File Type", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_menuItem_openActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveActionPerformed
        // Write all data in the program to a data model and saves the model
        // to the disk.
        
        if (currentFile == null)
        {
            menuItem_saveAsActionPerformed(evt);
        }
        if (currentFile != null)
        {
             try {
            FileOutputStream fos = new FileOutputStream(currentFile);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            
           DataModel dm = new DataModel(members, forumMap, dailyAttendance, attendanceDates, associationsMap);
           
           oos.writeObject(dm);
           
           fos.close();
           oos.close();
           
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error: File Not Found", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
        }
        }
       
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void menuItem_importForumInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_importForumInfoActionPerformed
        importForumInfo();

    }//GEN-LAST:event_menuItem_importForumInfoActionPerformed

    private void menuItem_importGW2InfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_importGW2InfoActionPerformed
        // TODO add your handling code here:
        importGW2ServerInformation();

    }//GEN-LAST:event_menuItem_importGW2InfoActionPerformed

    private void radioButton_fullAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton_fullAttendanceActionPerformed
        // TODO add your handling code here:
        spinner_customAttendance.setEnabled(false);
        // loops through all available dates and makes table that shows attendance for all available dates.
        int numDates = comboBox_dates.getItemCount();
        for (int i = 0; i < numDates; i++)
        {
         String date = (String) comboBox_dates.getItemAt(i);
            Scanner dateScan = new Scanner(date);
        dateScan.useDelimiter("_");
        
        int month = Integer.parseInt(dateScan.next());
        int day = Integer.parseInt(dateScan.next());
        int year = Integer.parseInt(dateScan.next());
        
        RaidDate raidDate = new RaidDate(month, day, year);
        
        attendanceDates.add(raidDate);
            
        }
        for (int j = 0; j < attendanceDates.size(); j++)
        {
            RaidDate rd = attendanceDates.
            getAttendance(rd);
        }

    }//GEN-LAST:event_radioButton_fullAttendanceActionPerformed

    private void radioButton_knight90DayAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton_knight90DayAttendanceActionPerformed
        // TODO add your handling code here:
        spinner_customAttendance.setEnabled(false);
    }//GEN-LAST:event_radioButton_knight90DayAttendanceActionPerformed

    private void radioButton_devoir30DayAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton_devoir30DayAttendanceActionPerformed
        // TODO add your handling code here:
        spinner_customAttendance.setEnabled(false);
        
    }//GEN-LAST:event_radioButton_devoir30DayAttendanceActionPerformed

    private void radioButton_currentAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton_currentAttendanceActionPerformed
        // TODO add your handling code here:
        spinner_customAttendance.setEnabled(false);
    }//GEN-LAST:event_radioButton_currentAttendanceActionPerformed

    private void radioButton_customAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton_customAttendanceActionPerformed
        // TODO add your handling code here:
        spinner_customAttendance.setEnabled(true);
    }//GEN-LAST:event_radioButton_customAttendanceActionPerformed

    private void button_getAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_getAttendanceActionPerformed
        // TODO add your handling code here:
        // enable/show the associations and attendance window.
        // Populates the Forum names list form the forumsMap
        // 1) Iterate through the keyset to use the keys to retrieve the forum Names
        // 2) Stores each forum name in an arraylist to be sorted
        // 3) Use Collections.sort(list) to sort the arraylist
        // 4) Add each item from arrayList to JList
        dialog_associations.setVisible(true);

        ArrayList<String> forumNames = new ArrayList(forumMap.values());

        forumNames.sort(String::compareToIgnoreCase);

        DefaultListModel model = new DefaultListModel();

        for (String name : forumNames) {
            model.addElement(name);
        }
        // populate the comboBox with the available attendance dates
        comboBox_dates.removeAllItems();
        comboBox_dates.addItem("SELECT");
        // Populate the comboBox_selectAvailableAttendance with all avialable
        // files based on screenshots folder
        File screenShotFolder = new File("Screenshots\\");
        
        File[] files = screenShotFolder.listFiles();
        
        for (File file: files)
        {
            if (file.isFile())
            {
                String name = file.getName();
                
                name = name.substring(0, name.indexOf("."));
                comboBox_dates.addItem(name);

                
            }
        }

        list_forumNames.setModel(model);


    }//GEN-LAST:event_button_getAttendanceActionPerformed

    private void button_finalizeAttendanceSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_finalizeAttendanceSelectionActionPerformed
        // Grabs the datae from combo attendance box and creates a raidDate object
        // the raidDate object will be added to the master attendance dates,
        // and then added to the attendance of each Member object for those 
        //that attended.
        
        if (comboBox_dates.getSelectedIndex() == 0) return;
        
        String date = (String) comboBox_dates.getSelectedItem();
        
        // Create a RaidDate object from the selected date in the combo box.
        Scanner dateScan = new Scanner(date);
        dateScan.useDelimiter("_");
        
        int month = Integer.parseInt(dateScan.next());
        int day = Integer.parseInt(dateScan.next());
        int year = Integer.parseInt(dateScan.next());
        
        RaidDate raidDate = new RaidDate(month, day, year);
        
        attendanceDates.add(raidDate);
        System.out.println(attendanceDates);
        
        // Loop through the associations table, add the raid date to any
        // member that was present that has both forumName and GW2Account
        String forumName;
        String accountName;
        DefaultTableModel dfm = (DefaultTableModel) table_associations.getModel();
        for (int i = 0; i < dfm.getRowCount(); i++)
        {
            forumName = (String) dfm.getValueAt(i, 1);
            accountName = (String) dfm.getValueAt(i, 2);
            if (!(accountName == null && forumName.equals("")))
            {
                
                if (members.containsKey(accountName))
                {
                    Member member = members.get(accountName);
                    ArrayList<RaidDate> attendance = member.getAttendance();
                
                attendance.add(raidDate);
                // add the forum name and ts name associations to the associationsMap
                
                String tsName = (String) table_associations.getValueAt(i, 0);
                associationsMap.put(forumName, accountName);
                associationsMap.put(tsName, accountName);
                }
               
            }
             else 
            {   
                return;
            }
        } 
       
        // update attendance table, onece the new attendance has been added
        updateAttendanceTable();
        DefaultTableModel clearDfm = (DefaultTableModel) table_associations.getModel();
        clearDfm.setRowCount(0);
        table_associations.setModel(clearDfm);
        comboBox_dates.setSelectedIndex(0);
 

    }//GEN-LAST:event_button_finalizeAttendanceSelectionActionPerformed

    private void comboBox_datesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_datesActionPerformed
        //holds a generate a list of all the available attendance dates
        // Get the selected attendance date, and find a screenshot that represents the date
        // runs OCR on the screenshots, and returns as a result a formatted string
        // If TS Name matches a forumName, then table will be updated with
        // the forumName, gw2Account, and any associations.
        String results = "";
        if (comboBox_dates.getSelectedIndex() > 0) {
            // Get selected item, add the "jpg" extension back to the file name;
            
            String screenShot = (String) comboBox_dates.getSelectedItem();
            screenShot += ".jpg";
            // call OCR and populate table
            results = getOCR("Screenshots\\" + screenShot);
            System.out.println(results);
        } else {
            return;
        }
        // Loop through the results to place on the TS names into an arraylist so
        //that the size of the table_dta can be determined.
        
        ArrayList<String> forumNames = new ArrayList();
        
        Scanner resultsData = new Scanner(results);
        
        while (resultsData.hasNextLine())
        {
            forumNames.add(resultsData.nextLine());
        }
        // setup column headers and the data array for the table_associations model
        String[] columnNames = {"TS Name", "Forum Name", "GW2Account"};
        String[][] data = new String[forumNames.size()][3];
        
        for (int i = 0; i < forumNames.size(); i++)
        {
            String tsName = forumNames.get(i);
            String gw2Account = getGw2Account(tsName);
            String forumName =  (members.containsKey(gw2Account))? members.get(gw2Account).getForumName() : "";
           // String associations = (members.containsKey(gw2Account))? members.get(gw2Account).getAssociations().toString() : "";
            if (forumName.equals("") && associationsMap.containsKey(tsName))
            {
                
                gw2Account = associationsMap.get(tsName);
                forumName = members.get(gw2Account).getForumName();
                
            }
            
            data[i][0] = tsName;
            data[i][1] = forumName;
            data[i][2] = gw2Account;
            //data[i][3] = associations;
            
        }
        
        // create a TableModel with all the data and add to table_associations
        DefaultTableModel dfm = new DefaultTableModel(data, columnNames);
        table_associations.setModel(dfm);
        
    }//GEN-LAST:event_comboBox_datesActionPerformed

    private void button_associateForumNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_associateForumNamesActionPerformed
        // Method takes the forum name that is selected and associates the forum name with
        // the TS Name and member account. Updates the table after the table_association has been made.

        // verify that both a table row selection and list selection have been made.
        int tableRowSelected = table_associations.getSelectedRow();

        String forumName = (String) list_forumNames.getSelectedValue();

        if (tableRowSelected == -1 || forumName == null) {
            JOptionPane.showMessageDialog(this, "No Item Selected", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ArrayList<String> currentAssociations;
        //Get the gw2Account from the selected forumName


        String gw2Account = getGw2Account(forumName);

        // Get the member based on the gw2Account and add the selected TSname 
        // to the associations
        // update the associations table with the forumName, gw2Acount, and the associations
        
    

            DefaultTableModel dfm = (DefaultTableModel) table_associations.getModel();
            dfm.setValueAt(forumName, tableRowSelected, 1);
            dfm.setValueAt(gw2Account, tableRowSelected, 2);
            table_associations.setModel(dfm);
        
    
    }//GEN-LAST:event_button_associateForumNamesActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveAsActionPerformed
        // Calls a file chooser. User chooses a file and thei file is assigned
        // <currentFile> instance vairable. Then calls the saveActionPerformed
        // method to actually save the file
        
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            currentFile = jfc.getSelectedFile();
            menuItem_saveActionPerformed(evt);
        }
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void menuItem_exportAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_exportAttendanceActionPerformed
        // Exports attendance data in the attendance tab to an Excel file by writing data
        // to a tab delimited .xls file.
        
        
    }//GEN-LAST:event_menuItem_exportAttendanceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_attendance;
    private javax.swing.JButton button_associateForumNames;
    private javax.swing.JButton button_finalizeAttendanceSelection;
    private javax.swing.JButton button_getAttendance;
    private javax.swing.JComboBox comboBox_dates;
    private javax.swing.JDialog dialog_associations;
    private javax.swing.JList list_forumNames;
    private javax.swing.JMenuBar menuBar_menu;
    private javax.swing.JMenuItem menuItem_close;
    private javax.swing.JMenuItem menuItem_exportAttendance;
    private javax.swing.JMenuItem menuItem_importForumInfo;
    private javax.swing.JMenuItem menuItem_importGW2Info;
    private javax.swing.JMenuItem menuItem_open;
    private javax.swing.JMenuItem menuItem_save;
    private javax.swing.JMenuItem menuItem_saveAs;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenu menu_import;
    private javax.swing.JPanel panel_attendance;
    private javax.swing.JPanel panel_summary;
    private javax.swing.JRadioButton radioButton_currentAttendance;
    private javax.swing.JRadioButton radioButton_customAttendance;
    private javax.swing.JRadioButton radioButton_devoir30DayAttendance;
    private javax.swing.JRadioButton radioButton_fullAttendance;
    private javax.swing.JRadioButton radioButton_knight90DayAttendance;
    private javax.swing.JScrollPane scrollPane_attendancePanel;
    private javax.swing.JScrollPane scrollPane_dialogNamesAndAssociations;
    private javax.swing.JScrollPane scrollPane_dialogPane;
    private javax.swing.JScrollPane scrollPane_summaryPanel;
    private javax.swing.JSpinner spinner_customAttendance;
    private javax.swing.JTabbedPane tabPane_attendance;
    private javax.swing.JTable table_associations;
    private javax.swing.JTable table_namesAndAccountsAttendance;
    private javax.swing.JTable table_summaryAttendanceData;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        importGW2ServerInformation();
        importForumInfo();
        syncMemberInfo();
        updateAttendanceTable();
        updateSummaryTable();

    }

    private void updateAttendanceTable() {

        // pull the data from the forumMap and put into the table_attendanceData
        // 2D Array data will store the member information
        // data[][0]- forumName
        //data[][1] - gw2Account
        // Array to hold all of the column names
        String[][] data = new String[members.size()][attendanceDates.size()+2];
        //attendanceDates.add(new RaidDate(7, 13, 18));
        String[] columnNames = new String[attendanceDates.size()+2];
        columnNames[0] = "Enjin Names";
        columnNames[1] = "Gw2 Account Name";
        
        // loop through the attendance dates and add dates as column headers

          RaidDate[] dates = new RaidDate[1];
          if (!attendanceDates.isEmpty())
          {
          dates = attendanceDates.toArray(new RaidDate[attendanceDates.size()]);
        System.out.println(attendanceDates.size());
        int j = 0;
        for (int i = 2; i < attendanceDates.size()+2; i++)
        {
            columnNames[i] = dates[j].toString();
            j++;
        }
        System.out.println(Arrays.toString(columnNames));
                Set<String> keys = members.keySet();

        Iterator<String> iterator = keys.iterator();

        String account;
        Member m;
        int index = 0;
        for (int i = 0; i < attendanceDates.size(); i++)
        {
            while (iterator.hasNext())
            {
             account = iterator.next();
            m = members.get(account);
            System.out.println(m.getAttendance());
            if (m.getAttendance().contains(dates[i]))
            {
                data[index][2] = "x";
            }
            else
            {
                data[index][2] = "";
            }
            index++;
            
            }
          
        }
          }
       
 

        // Pull data from the forumMap to add to the data array.
          Set<String> keySet = members.keySet();
           Iterator<String> iterate = keySet.iterator();

        int index = 0;
        while (iterate.hasNext()) 
        {
            String gw2Account = iterate.next();
            Member member = members.get(gw2Account);

            // Only display members that are in the guild and have a rank
            // of squire or higher.
            if (members.containsKey(gw2Account)) {

                if (!member.getRank().equals("Squire")) 
                {
                    data[index][0] = member.getForumName();
                    data[index][1] = gw2Account;
              
                    

                    index++;
                }
            }
        }
        // Build a DefaultTableModel with the data and columnNames arrays, then 
        // add the DefaultTableModel to the table

        DefaultTableModel dfm = new DefaultTableModel(data, columnNames);
        table_namesAndAccountsAttendance.setModel(dfm);

        // Table will only display members that are ranked higher than "squire".
        // So the table will always have several empty rows. The tabel must be 
        // "trimmed" so that only the appropriate data is displayed. All blank
        // rows are removed.
        dfm.setRowCount(index);

    }

    private void syncMemberInfo() {
        Set<String> accountKeys = members.keySet();
        Iterator<String> keyIterator = accountKeys.iterator();

        while (keyIterator.hasNext()) {
            String account = keyIterator.next();
            if (forumMap.containsKey(account)) {
                members.get(account).setForumName(forumMap.get(account));
            }
        }

    }

    private void importForumInfo() {
    // Method will be used to explicitly import all of the forum information 
        // and the direct association with the unique member's Guild Wars 2 account
        // For development purposes, the forum informatio nwill be hard coded
        // into a data file that will use the following format:
        //      <forumName>\t<gw2Account>\n
        //
        //The gw2Account and forumName will be added to the forumsMap data structure
        // after checking ot see if the gw2Account of forumName does not already exist
        //
        // This operation wil be performed every time the application is launched 
        // so that new data will always be uploaded.

        // Setup a Scanner object ot import dat file straing from disk.
        // this file location will later be changed to a perference file and variable.
        try {

            Scanner input = new Scanner(new File("datFiles\\forums_GW2accounts.txt"));

        // Dat file uses the first line as a header line. This code will skip 
            // the first line so that headers are not imported.
            input.nextLine();
            while (input.hasNextLine()) {
                // Each line represents a member in the format username \t gw2Account 
                Scanner line = new Scanner(input.nextLine());
                line.useDelimiter("\t");

                String value = line.next(); // forumName
                String key = line.next().toLowerCase(); // gw2Account

                forumMap.put(key, value);

            }

        } catch (FileNotFoundException ex) {
              JOptionPane.showMessageDialog(this, ex.toString(), "Error: File Not Found", JOptionPane.ERROR_MESSAGE);
            
        }

    }

    private void importGW2ServerInformation() {
        ArrayList<String> membersList = GW2Import.importGW2GuildMembers();

        for (String memberString : membersList) {
            Scanner read = new Scanner(memberString);
            read.useDelimiter("\t");

            String GW2AccountName = read.next().toLowerCase();
            String rank = read.next();
            String dateJoined = read.next();

            Member member;
            if (members.containsKey(GW2AccountName)) {
                members.get(GW2AccountName).setRank(rank);
            } else {
                member = new Member(GW2AccountName, forumMap.get(GW2AccountName), rank);
                members.put(GW2AccountName, member);
            }

//================================================================            
            // takes the memberString and pulls the GW2 Account, rank, and
            //joined date to create a new member object.
            // memberString is tab delimited <gw2account>\t<rank?\t<joinedDate>
            // once the data is aprsed from the memberString, the new member
            // is added to the mmembers treeMap.
//=============================================================
//================================================================
            // takes the memberString and pulls the GW2 Account, rank, and
            //joined date to create a new member object.
            // memberString is tab delimited <gw2account>\t<rank?\t<joinedDate>
            // once the data is aprsed from the memberString, the new member
            // is added to the mmembers treeMap.
//=============================================================
        }

    }

    private void updateSummaryTable() {
        // pull the data from the forumMap and put into the table_attendanceData
        // 2D Array data will store the member information
        // data[][0]- forumName
        //data[][1] - gw2Account
        // Array to hold all of the column names
        String[][] data = new String[members.size()][9];
        String[] columnNames = {"Forum Name", "GW2Account", "Rank", "90 Day %", "90 Day Attended", "90 Day Available", "30 Day %",
            "30 Day Attended", "30 Day Available)"};

        // Pull data from the forumMap to add to the data array.
        Set<String> keys = members.keySet();
        Iterator<String> iterator = keys.iterator();

        int index = 0;
        while (iterator.hasNext()) {
            String gw2Account = iterator.next();
            Member member = members.get(gw2Account);

            // Display all members in the Summary Table
            data[index][0] = member.getForumName();
            data[index][1] = gw2Account;
            data[index][2] = member.getRank();

            index++;

        }
        // Build a DefaultTableModel with the data and columnNames arrays, then 
        // add the DefaultTableModel to the table

        DefaultTableModel dfm = new DefaultTableModel(data, columnNames);
        table_summaryAttendanceData.setModel(dfm);

        // Table will only display members that are ranked higher than "squire".
        // So the table will always have several empty rows. The tabel must be 
        // "trimmed" so that only the appropriate data is displayed. All blank
        // rows are removed.
        dfm.setRowCount(index);
    }

    private String getOCR(String fileName) {
        // Create a Tesseract Object from the Java CPP wrapper
        TessBaseAPI api = new TessBaseAPI();

        // Initialize the Tesseract Object with English Language
        if (api.Init(".", "ENG") != 0) {
            System.out.println("Could not initialize Tesseract Eng Language");
        }
        // Hold results of the OCR scan in a Byte Stream
        BytePointer outText;

        // creates a javaCPP image to be processed by Tesseract
        PIX image = pixRead(fileName);

        // takes the Leptonics PIX image and loads into Tesseract
        api.SetImage(image);

        // Returns the OCR results in UTF8 as a Byte Stream
        outText = api.GetUTF8Text();

        // Holds the real text to be used in processing the data
        String OCR_results;

        // Take the outText, make sure it is UTF8 format, and convert to a String
        try {
            OCR_results = outText.getString("UTF-8");
            assertTrue(!OCR_results.isEmpty());

        } catch (UnsupportedEncodingException ex) {
            OCR_results = "";
            JOptionPane.showMessageDialog(this, ex.toString(), "Error: Wrong encoding", JOptionPane.ERROR_MESSAGE);
        }

        // Destroy all used objects and release memory
        api.End();
        outText.deallocate();
        pixDestroy(image);
        String OCR_resultsFinal = "";
        Scanner read = new Scanner(OCR_results);

        while (read.hasNextLine()) {
            String line = read.nextLine();
            if (line.contains("KRI'A")){
            line = line.substring(line.indexOf("1KRTAl")+6);                   
        }
        
        // A__
        
        line = line.replace('[', ' ');
        line = line.replace(']', ' ');
        line = line.replace('{', ' ');
        line = line.replace('}', ' ');

        if (line.contains("KRTA ")){
            line = line.substring(line.indexOf("KRTA")+5);                   
        }

        // el and el
        if (line.contains("lKRTAl")){
            line = line.substring(line.indexOf("lKRTAl")+6);                   
        }

        // el and one
        if (line.contains("lKRTA1")){
            line = line.substring(line.indexOf("lKRTA1")+6);                   
        }

        //one and one
        if (line.contains("1KRTA1")){
            line = line.substring(line.indexOf("1KRTA1")+6);                   
        }

        //one and el
        if (line.contains("1KRTAl")){
            line = line.substring(line.indexOf("1KRTAl")+6);                   
        }
        
        // krta
        if (line.contains("krta")){
            line = line.substring(line.indexOf("1KRTAl")+7);                   
        }
        
        // KRI'A
        if (line.contains("KRI'A")){
            line = line.substring(line.indexOf("1KRTAl")+8);                   
        }
        
        // KR'I'A
        if (line.contains("KR'I'A")){
            line = line.substring(line.indexOf("1KRTAl")+10);                   
        }
        
        // KRl'A
        if (line.contains("KRl'A")){
            line = line.substring(line.indexOf("1KRTAl")+8);                   
        }
        
        if (line.contains("A  ")){
            line = line.substring(line.indexOf("A  ")+3);                   
        }
        
        if (line.charAt(0) == ' '){
            line = line.substring(1);
        }
        
        return line;

    }
        return OCR_resultsFinal;
            
        }


    private String getGw2Account(String forumName) 
    {
        // Find the fw2Account associated with a forumName
        // returns the fw2Account if it exists
        // returns an empty string "" if no forumName exists
        
        String gw2Account = "";
        
        for (String key: forumMap.keySet())
        {
            if (forumMap.get(key).equals(forumName))
            {
                gw2Account = key;
            }
        }
        
        return gw2Account;
    }
    public void getAttendance(RaidDate rd)
    {
                String forumName;
        String accountName;
        DefaultTableModel dfm = (DefaultTableModel) table_associations.getModel();
        for (int i = 0; i < dfm.getRowCount(); i++)
        {
            forumName = (String) dfm.getValueAt(i, 1);
            accountName = (String) dfm.getValueAt(i, 2);
            if (!(accountName == null && forumName.equals("")))
            {
                
                if (members.containsKey(accountName))
                {
                    Member member = members.get(accountName);
                    ArrayList<RaidDate> attendance = member.getAttendance();
                
                attendance.add(rd);
                // add the forum name and ts name associations to the associationsMap
                
                String tsName = (String) table_associations.getValueAt(i, 0);
                associationsMap.put(forumName, accountName);
                associationsMap.put(tsName, accountName);
                }
               
            }
             else 
            {   
                return;
            }
        }

    }
            
    
}
